// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/wallet_service/v1/wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletSvc_GetWallets_FullMethodName        = "/proto.wallet_service.v1.WalletSvc/GetWallets"
	WalletSvc_GetWalletByUserId_FullMethodName = "/proto.wallet_service.v1.WalletSvc/GetWalletByUserId"
	WalletSvc_CreateWallet_FullMethodName      = "/proto.wallet_service.v1.WalletSvc/CreateWallet"
	WalletSvc_UpdateWallet_FullMethodName      = "/proto.wallet_service.v1.WalletSvc/UpdateWallet"
)

// WalletSvcClient is the client API for WalletSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletSvcClient interface {
	GetWallets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWalletsResponse, error)
	GetWalletByUserId(ctx context.Context, in *GetWalletByUserIdRequest, opts ...grpc.CallOption) (*GetWalletByUserIdResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*MutationResponse, error)
}

type walletSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletSvcClient(cc grpc.ClientConnInterface) WalletSvcClient {
	return &walletSvcClient{cc}
}

func (c *walletSvcClient) GetWallets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWalletsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletsResponse)
	err := c.cc.Invoke(ctx, WalletSvc_GetWallets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSvcClient) GetWalletByUserId(ctx context.Context, in *GetWalletByUserIdRequest, opts ...grpc.CallOption) (*GetWalletByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWalletByUserIdResponse)
	err := c.cc.Invoke(ctx, WalletSvc_GetWalletByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSvcClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, WalletSvc_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSvcClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, WalletSvc_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletSvcServer is the server API for WalletSvc service.
// All implementations must embed UnimplementedWalletSvcServer
// for forward compatibility.
type WalletSvcServer interface {
	GetWallets(context.Context, *emptypb.Empty) (*GetWalletsResponse, error)
	GetWalletByUserId(context.Context, *GetWalletByUserIdRequest) (*GetWalletByUserIdResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*MutationResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*MutationResponse, error)
	mustEmbedUnimplementedWalletSvcServer()
}

// UnimplementedWalletSvcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletSvcServer struct{}

func (UnimplementedWalletSvcServer) GetWallets(context.Context, *emptypb.Empty) (*GetWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWallets not implemented")
}
func (UnimplementedWalletSvcServer) GetWalletByUserId(context.Context, *GetWalletByUserIdRequest) (*GetWalletByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByUserId not implemented")
}
func (UnimplementedWalletSvcServer) CreateWallet(context.Context, *CreateWalletRequest) (*MutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletSvcServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*MutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedWalletSvcServer) mustEmbedUnimplementedWalletSvcServer() {}
func (UnimplementedWalletSvcServer) testEmbeddedByValue()                   {}

// UnsafeWalletSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletSvcServer will
// result in compilation errors.
type UnsafeWalletSvcServer interface {
	mustEmbedUnimplementedWalletSvcServer()
}

func RegisterWalletSvcServer(s grpc.ServiceRegistrar, srv WalletSvcServer) {
	// If the following call pancis, it indicates UnimplementedWalletSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletSvc_ServiceDesc, srv)
}

func _WalletSvc_GetWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSvcServer).GetWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSvc_GetWallets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSvcServer).GetWallets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSvc_GetWalletByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSvcServer).GetWalletByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSvc_GetWalletByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSvcServer).GetWalletByUserId(ctx, req.(*GetWalletByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSvc_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSvcServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSvc_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSvcServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSvc_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSvcServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletSvc_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSvcServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletSvc_ServiceDesc is the grpc.ServiceDesc for WalletSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.wallet_service.v1.WalletSvc",
	HandlerType: (*WalletSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWallets",
			Handler:    _WalletSvc_GetWallets_Handler,
		},
		{
			MethodName: "GetWalletByUserId",
			Handler:    _WalletSvc_GetWalletByUserId_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletSvc_CreateWallet_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _WalletSvc_UpdateWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet_service/v1/wallet.proto",
}
